trigger:
  branches:
    include:
    - '*'

stages:
- stage: Test
  jobs:
  - job: Ubuntu
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        PYTHONBIN=$(pybin.pythonLocation)/bin/python
        echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
      displayName: Set Python $(python.version)
    - template: .azure-pipelines/build-run-tests.yml
  - job: Ubuntu_EasternTimezone
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: '3.8'
    steps:
      - bash: sudo timedatectl set-timezone America/New_York
        displayName: Set timezone
      - bash: date
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'
        name: pybin
      - script: |
          PYTHONBIN=$(pybin.pythonLocation)/bin/python
          echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
        displayName: Set Python $(python.version)
      - template: .azure-pipelines/build-run-tests.yml
  - job: MacOS
    pool:
      vmImage: 'macOS-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        PYTHONBIN=$(pybin.pythonLocation)/bin/python
        echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
      displayName: Set Python $(python.version)
    - template: .azure-pipelines/build-run-tests.yml
  - job: Windows
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        set PYTHONBIN=$(pybin.pythonLocation)\python.exe
        echo ##vso[task.setvariable variable=pythonbin]%PYTHONBIN%
      displayName: Set Python $(python.version)
    - script: |
        echo $(pythonbin)
        $(pythonbin) --version
      displayName: Check Python path
    - script: $(pythonbin) -m pip install --user -U pybind11 pytest pytest-cov coverage codecov patch
      displayName: Install dependencies
    - script: |
        $(pythonbin) setup.py build_orc --download-only=True
        $(pythonbin) -m patch .azure-pipelines\orc_thirdpartytoolchain_tzdata.patch
        $(pythonbin) setup.py build_orc
      displayName: Build ORC Lib
    - script: |
        $(pythonbin) setup.py build -g
        $(pythonbin) setup.py install --user
      displayName: Install package
    - script: |
        FOR /F "tokens=* USEBACKQ" %%F IN (`$(pythonbin) -c "import os, pyorc; print(os.path.dirname(pyorc.__file__))"`) DO (SET INSTALLDIR=%%F)
        echo %INSTALLDIR%
        $(pythonbin) -m pytest -vs --junitxml=./test-results.xml --cov=%INSTALLDIR% tests/
      displayName: Run pytest

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: test-results.xml
        testRunTitle: Tests on $(Agent.OS) with Python $(python.version)
      condition: succeededOrFailed()

    - script: |
           $(pythonbin) -m codecov
      env:
        CODECOV_TOKEN: $(codecov)
      displayName: Report Coverage
      condition: succeeded()
- stage: Build
  jobs:
  - job: manylinux_wheels
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python36:
          cpython.version: cp36-cp36m
        Python37:
          cpython.version: cp37-cp37m
        Python38:
          cpython.version: cp38-cp38
        Python39:
          cpython.version: cp39-cp39
    container:
      image: quay.io/pypa/manylinux2010_x86_64:latest
    steps:
    - bash: /opt/python/$(cpython.version)/bin/python -m pip install --user cmake pybind11
      displayName: Install dependencies
    - bash: PATH=`/opt/python/$(cpython.version)/bin/python -c 'import cmake; print(cmake.CMAKE_BIN_DIR)'`:$PATH cmake --version
      displayName: Check cmake
    - bash: |
        PATH=`/opt/python/$(cpython.version)/bin/python -c 'import cmake; print(cmake.CMAKE_BIN_DIR)'`:$PATH
        /opt/python/$(cpython.version)/bin/python setup.py build_orc --build-type=release
      displayName: Build ORC Lib
    - bash: /opt/python/$(cpython.version)/bin/python setup.py bdist_wheel
      displayName: Build wheel
    - bash: auditwheel repair dist/pyorc-*.whl
      displayName: Repair wheel
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/wheelhouse/'
        contents: '*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: wheels
  - job: manylinux_aarch64_wheels
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python36:
          cpython.version: cp36-cp36m
          manylinux: 'manylinux_aarch64'
        Python37:
          cpython.version: cp37-cp37m
          manylinux: 'manylinux_aarch64'
        Python38:
          cpython.version: cp38-cp38
          manylinux: 'manylinux_aarch64'
        Python39:
          cpython.version: cp39-cp39
          manylinux: 'manylinux_aarch64'
    steps:
    - script: docker run --rm --privileged hypriot/qemu-register
      displayName: 'Registering qemu'
    - script: |
        docker run -v $(pwd):"${DOCKER_ROOT_DIRECTORY}":rw,z \
                   -e HOST_USER_ID \
                    "quay.io/pypa/manylinux2014_aarch64:latest" \
                    bash -c "cd $DOCKER_ROOT_DIRECTORY;
                    /opt/python/$(cpython.version)/bin/python -m pip install --user cmake pybind11 && \
                    export PATH=`/opt/python/$(cpython.version)/bin/python -c 'import cmake; print(cmake.CMAKE_BIN_DIR)'`:$PATH && cmake --version && \
                    export PATH=`/opt/python/$(cpython.version)/bin/python -c 'import cmake; print(cmake.CMAKE_BIN_DIR)'`:$PATH && \
                    yum update && yum -y install gcc gcc-c++ && \
                    /opt/python/$(cpython.version)/bin/python setup.py build_orc --build-type=release && \
                    /opt/python/$(cpython.version)/bin/python setup.py bdist_wheel && \
                    auditwheel repair dist/pyorc-*.whl"
      displayName: 'Running AArch64 build'
      env:
        DOCKER_ROOT_DIRECTORY: "/home/source_root"
        HOST_USER_ID: $(id -u)
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/wheelhouse/'
        contents: '*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: wheels
  - job: macos_wheels
    pool:
      vmImage: 'macOS-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        PYTHONBIN=$(pybin.pythonLocation)/bin/python
        echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
      displayName: Set Python $(python.version)
    - script: |
        echo $(pythonbin)
        $(pythonbin) --version
      displayName: Check Python path
    - script: $(pythonbin) -m pip install --user -U wheel pybind11
      displayName: Install dependencies

    - script: $(pythonbin) setup.py build_orc --build-type=release
      displayName: Build ORC Lib
    - script: $(pythonbin) setup.py bdist_wheel
      displayName: Build wheel
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/dist/'
        contents: '*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: wheels
  - job: windows_wheels
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        set PYTHONBIN=$(pybin.pythonLocation)\python.exe
        echo ##vso[task.setvariable variable=pythonbin]%PYTHONBIN%
      displayName: Set Python $(python.version)
    - script: |
        echo $(pythonbin)
        $(pythonbin) --version
      displayName: Check Python path
    - script: $(pythonbin) -m pip install --user -U wheel patch pybind11
      displayName: Install dependencies
    
    - script: |
        $(pythonbin) setup.py build_orc --download-only=True
        $(pythonbin) -m patch .azure-pipelines\orc_thirdpartytoolchain_tzdata.patch
        $(pythonbin) setup.py build_orc --build-type=release
      displayName: Build ORC Lib
    - script: $(pythonbin) setup.py bdist_wheel
      displayName: Build wheel
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/dist/'
        contents: '*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: wheels
